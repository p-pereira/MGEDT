from utilities.utils import roundAllNums
import random
# Build the lexer
from ply.lex import  lex
from ply.yacc import yacc

def getval(n):   
    if n not in ts: print(f"Undefined name '{n}'")
    return ts.get(n,0)

def p_error(t):
    print(f"Syntax error at '{t.value}', [{t.lexer.lineno}]")

def get_genome_from_dt_idf(phenotype):
    phenotype = roundAllNums(phenotype)
    return parser.parse(phenotype)

literals  = "+-/*=().[],<>"
t_ignore  = " \t\n'\""
tokens = ('NUMBER', 'npwhere', 'idapplication', 'idoperator', 'idaffmanager', 
          'idbrowser', 'idpartner', 'idcampaign', 'idverticaltype', 
          'regioncontinent', 'country_name', 'accmanager', 'x', )

t_npwhere = 'np.where'
t_x = 'x'


def t_NUMBER(t):
    r'\d'
    t.value = int(t.value)
    return t

def t_error(t):
    print(f"Illegal character '{t.value[0]}', [{t.lexer.lineno}]")
    t.lexer.skip(1)

def gen_rnd(chosen, productions):
  factor = 255 // productions
  return random.randint(0, factor) * productions + chosen

# symboltable : dictionary of names
ts = { }
# Grammar
def p_a(t) : "result : npwhere '(' x '[' idx ']' comparison '(' value ')' ',' node ',' node ')'"  \
                                            ; t[0] = [gen_rnd(0 ,1)] + t[5] + t[7] + t[9] + t[12] + t[14]
def p_b(t) : "node : result"                ; t[0] = [gen_rnd(0, 2)] + t[1]
def p_c(t) : "node : leaf "                 ; t[0] = [gen_rnd(1, 2)] + t[1]
def p_d(t) : "leaf : NUMBER '.' digits"     ; t[0] = [gen_rnd(0, 2)] + t[3]
def p_e(t) : "leaf : NUMBER"                ; t[0] = [gen_rnd(1, 2)]
def p_f(t) : "digits : digits digit"        ; t[0] = [gen_rnd(0, 2)] + t[1] + t[2]
def p_g(t) : "digits : digit"               ; t[0] = [gen_rnd(1, 2)] + t[1]
def p_h(t) : "digit : NUMBER"               ; t[0] = [gen_rnd(t[1], 10)]
def p_i(t) : "comparison : '=' '='"         ; t[0] = [gen_rnd(0, 4)]
def p_j(t) : "comparison : '<'"             ; t[0] = [gen_rnd(1, 4)]
def p_k(t) : "comparison : '>'"             ; t[0] = [gen_rnd(2, 4)]
def p_l(t) : "comparison : '<' '='"         ; t[0] = [gen_rnd(3, 4)]
def p_m(t) : "value : digits '.' digits"   ; t[0] = [gen_rnd(0, 2)] + t[1] + t[3]
def p_n(t) : "value : digits"              ; t[0] = [gen_rnd(1, 2)] + t[1]